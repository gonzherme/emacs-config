
#+TITLE: Gonz's GNU Emacs Config
#+AUTHOR: Gonzalo de Hermenegildo
#+STARTUP: showeverything
#+OPTIONS: toc:2

* About
My attempt at an organized config

* Package Management System
Set package sources
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

Update packages every 60 days
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 60)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

* Keybindings
Apple-like
#+begin_src emacs-lisp
(setq mac-command-modifier 'meta) ;; Cmd as M
(global-set-key (kbd "M-c") 'kill-ring-save) ;; copy
(global-set-key (kbd "M-v") 'yank) ;; paste
(global-set-key (kbd "M-z") 'undo) ;; undo
(global-set-key (kbd "M-a") 'mark-whole-buffer) ;; select all
#+end_src

Unbind some default keys
#+begin_src emacs-lisp
(global-unset-key (kbd "C-_")) ;; remove C-S-_ to undo
(global-unset-key (kbd "C-y")) ;; remove  C-y to yank
(global-unset-key (kbd "C-x h")) ;; remove C-x h to select all
(global-unset-key (kbd "C-x C-s")) ;; remove save, its automatic
#+end_src

Mouse support
#+begin_src emacs-lisp
(global-unset-key [S-mouse-1])
(setq shift-select-mode t)

;; Make Shift + mouse-1 set the point (start selection)
(global-set-key [S-mouse-1] 'mouse-set-point)

;; Make Shift + drag extend the selection
(global-set-key [S-down-mouse-1] 'mouse-save-then-kill)
(global-set-key [S-drag-mouse-1] 'mouse-drag-region)
#+end_src

* Custom Functions
Quick file finding
#+begin_src emacs-lisp
;; config
(defun config ()
  (interactive)
  ;; (delete-other-windows)
  (find-file "~/.emacs.d/config.org")
)

;; cs
(defun cs ()
  (interactive)
  ;; (delete-other-windows)
  (dired "~/gonz/cs")
)
#+end_src

* Visuals
Startup screen
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
;; startup scratch buffer as org mode
(setq initial-major-mode 'org-mode)
#+end_src

No clutter
#+begin_src emacs-lisp
(menu-bar-mode -1) ;; no menubar
(tool-bar-mode -1) ;; no toolbars
(scroll-bar-mode -1) ;; no scroll bars

;; transparent titlebar
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)

(add-hook 'prog-mode-hook #'display-line-numbers-mode) ;; display line nums in progr mode
(global-visual-line-mode t) ;; lines wrap around
#+end_src

Themes ([[https://emacsfodder.github.io/emacs-theme-editor/][custom theme generator]])
#+begin_src emacs-lisp
;; imported doom themes
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t) ;; if nil, bold is universally disabled
  (setq doom-themes-enable-italic t) ;; if nil, italics is universally disabled  
  (doom-themes-visual-bell-config);; enable flashing mode-line on errors
  (doom-themes-org-config)) ;; corrects (and improves) org-mode's native fontification

;; custom themes
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
;; current theme
(load-theme 'doom-spacegrey t)
;; cursor width
(setq-default cursor-type '(bar . 2))
#+end_src

Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrains Mono")
(set-face-attribute 'default nil
	:height 160
	:weight 'medium)
#+end_src

Modeline
#+begin_src emacs-lisp
;; aesthetic
(use-package mood-line
  :ensure t
  :config
  (mood-line-mode))

;; remove/abbreviate minor-mode names in modeline
(use-package diminish)
#+end_src

Window
#+begin_src emacs-lisp
(setq initial-frame-alist
      '((width . 122)
        (height . 36)
        (top . 50)
        (left . 110)))

(setq frame-resize-pixelwise t) ;; pixel precision in window movement
#+end_src

Tabs
#+begin_src emacs-lisp
(tab-bar-mode 1)

;; tab bindings
(global-set-key (kbd "C-S-<tab>") 'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "C-<tab>") 'tab-bar-switch-to-next-tab)
(global-set-key (kbd "M-t") 'tab-bar-new-tab)
(global-set-key (kbd "M-w") 'tab-bar-close-tab)

;; aesthetics
(setq tab-bar-show 1) ;; hide bar if less than 1 tabs open
(setq tab-bar-new-tab-to 'right) ;; put new tab immediate right of current tab
(setq tab-bar-close-button-show nil) ;; remove button that closes tab
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator))
#+end_src

All the icons (provides icons)
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

Olivetti
#+begin_src emacs-lisp
(use-package olivetti
  :ensure t
  :config
  (setq-default olivetti-body-width 100))
#+end_src

Ultra scroll
#+begin_src emacs-lisp
(pixel-scroll-precision-mode 1)
(setq pixel-scroll-precision-use-momentum t)     ;; enable inertial/momentum scrolling
(setq pixel-scroll-precision-interpolation-factor 0.0005) ;; speed of scroll animation
(setq pixel-scroll-precision-large-scroll-height 20)  ;; default is 100
  #+end_src


* Assist Tools
Which-key (suggests commands)
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → ")
  )
#+end_src


Company (in-buffer text autocomplete suggestions)
#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t)
)

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode)
)

;; disable company in shell
(add-hook 'shell-mode-hook (lambda () (company-mode -1)) 'append)
#+end_src

Ivy (emacs completion, like =M-x= command suggestions)
#+begin_src emacs-lisp
(use-package ivy
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))
#+end_src

Counsel (extension on Ivy)
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))
#+end_src

Ivy rich (enhancement layer for Ivy)
#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev))

(use-package all-the-icons-ivy-rich
  :init (all-the-icons-ivy-rich-mode 1))
#+end_src

Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :diminish ;;explanation of what diminish does, search for "DIMINISH"
  :init (global-flycheck-mode))
#+end_src

Treemacs
#+begin_src emacs-lisp
(use-package treemacs)
#+end_src

* Git
Magit
#+begin_src emacs-lisp
(use-package magit
  :defer t
  :bind (:map magit-mode-map
              ("C-M-f" . magit-section-forward)
              ("C-M-b" . magit-section-backward))
  :bind (:map custom-bindings-map
              ("M-g b" . magit-blame-addition))
  :hook
  ((magit-pre-refresh  . diff-hl-magit-pre-refresh)
   (magit-post-refresh . diff-hl-magit-post-refresh))
  :config
  (setq magit-mode-quit-window 'magit-restore-window-configuration
		magit-auto-revert-mode t)
  ; Remove tags from status buffer headings to speed up refresh slightly
  (remove-hook 'magit-status-sections-hook 'magit-insert-tags-header))
#+end_src

Git Timemachine
#+begin_src emacs-lisp
(use-package git-timemachine
  :defer t)
#+end_src

* Markdown
Markdown mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("\\.md\\'" . markdown-mode))
#+end_src

Grip mode (renders markdown in github-like manner)
#+begin_src emacs-lisp
(use-package grip-mode
  :ensure t
  ;; :commands (grip-mode grip-show-preview)
  :hook (markdown-mode . grip-mode)
  :config
  ;; split vertically
  (setq split-width-threshold 0)
  (setq split-height-threshold nil)
)

;; !! Github username and access key for grip-mode set in secrets.el
#+end_src

* Org Mode
** Test out
#+begin_src emacs-lisp
(use-package org
  :defer t
  :hook ((org-mode . olivetti-mode)
	 (org-mode . variable-pitch-mode)
	 (org-mode . visual-line-mode) ;; line wrap
	 (org-mode . (lambda () (setq-local mode-line-format nil))) ;; no modeline
	 )
  :config
  ;; Inline formatting
  (setq org-hide-emphasis-markers t)
  (setq org-pretty-entities t)
  (setq org-startup-with-inline-images t)

  ;; Clean up source blocks
  (setq org-edit-src-content-indentation 0)

  ;; Load code block execution support
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

  ;; Latex
  (setq org-startup-with-latex-preview t)
  (plist-put org-format-latex-options :scale 1.35)
 )

;; Org modern
 (use-package org-modern
  :ensure t
  :hook (org-mode . org-modern-mode)
  :config
  ;; Make sure folding indicators like ▶ or ▼ are OFF
  (setq org-modern-fold-stars nil)       ; disables > looking arrows
  (setq org-modern-hide-stars nil)       ; shows original stars
  (setq org-modern-star '("◉" "○" "✸" "✿" "➤" "•"))
  (setq org-hide-leading-stars t))

;; Toc-org: table of contents
(use-package toc-org
  :hook (org-mode . toc-org-enable))
#+end_src

* Latex
Auctex
#+begin_src emacs-lisp
(use-package auctex
  :hook
  (LaTeX-mode . turn-on-prettify-symbols-mode)
  (LaTeX-mode . reftex-mode)
  (LaTeX-mode . outline-minor-mode)
  (LaTeX-mode . olivetti-mode))
#+end_src

Reftex
#+begin_src emacs-lisp
(setq reftex-toc-split-windows-horizontally t
	  reftex-toc-split-windows-fraction     0.2)
#+end_src

* Programming Mode
Editing
#+begin_src emacs-lisp
;; highlight all occurrences of word selected / cursor at
(use-package symbol-overlay
  :ensure t
  :hook (prog-mode . symbol-overlay-mode))
;; automatic closing parenthesis
(electric-pair-mode 1)
#+end_src

Visuals
#+begin_src emacs-lisp
;; line numbers
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
;; olivetti
(add-hook 'prog-mode-hook #'olivetti-mode)
;; diff-hl (show git changess on buffer left side)
(use-package diff-hl
  :hook (prog-mode . diff-hl-mode))
#+end_src

Language Support

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/language-support/") ;; ocaml, serpent-mode, why3
(add-to-list 'auto-mode-alist '("\\.c0\\'" . c-mode)) ;; c0

;; why3 (not needed)
;; (require 'why3)
;; serpent (too long, not worth activating)
;; (add-to-list 'load-path "~/.emacs.d/language-support/serpent-mode.el")
#+end_src


** LSP Mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook ((python-mode . lsp-deferred)
         (c-mode . lsp-deferred)
	 (c++-mode . lsp-deferred)
         (go-mode . lsp-deferred))
  :config
  (global-set-key [C-mouse-1] #'lsp-ui-peek-find-definitions)
  (setq lsp-headerline-breadcrumb-enable 1)) ; we'll use a different method for function tracking

(use-package lsp-ui
  :ensure t
  :after lsp-mode
  :commands lsp-ui-mode
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (lsp-enable-which-key-integration t)
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-include-signature t
        lsp-ui-sideline-enable nil ;; disable sideline
        lsp-ui-doc-position 'at-point   ;; where to show the popup
        lsp-ui-doc-show-with-cursor nil ;; don't show popup if (text) cursor is on word
        lsp-ui-doc-show-with-mouse t)) ;; shows variable/function info when mouse hovers over
#+end_src

** LSP Servers
Pyright
#+begin_src emacs-lisp
;; Installed with npm install -g pyright
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda () (require 'lsp-pyright) (lsp))))
#+end_src

Gopls (go server, installed via homebrew)
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+end_src


* Modernize Text Editing
#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; typing on selected text deletes it
(save-place-mode 1)          ;; remember cursor location in files after closing
(global-auto-revert-mode t)  ;; automatically show changes if the file has changed

;; undo and redo
(use-package undo-fu
  :config
  (global-unset-key (kbd "C-z"))
  (global-set-key (kbd "M-z")   'undo-fu-only-undo)
  (global-set-key (kbd "M-S-z") 'undo-fu-only-redo))

;; apply copy/cut/delete to entire line
(use-package whole-line-or-region
  :ensure t
  :config
  (whole-line-or-region-global-mode))
#+end_src

Autosave
#+begin_src emacs-lisp
(use-package real-auto-save
  :ensure t
  :init
  (setq real-auto-save-interval 1) ;; in seconds
  :config
  (add-hook 'find-file-hook #'real-auto-save-mode)) ;; apply to any opened file
#+end_src

No backup files
#+begin_src emacs-lisp
(setq make-backup-files nil)  ;; Disable backup files like file~
(setq auto-save-default nil)  ;; Disable auto-save files like #file#
#+end_src
