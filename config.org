#+TITLE: Gonz's GNU Emacs Config
#+AUTHOR: Gonzalo de Hermenegildo
#+STARTUP: showeverything
#+OPTIONS: toc:2

- early-init.el: a file that gets loaded before this one
- Largely based on [[https://gitlab.com/dwt1/configuring-emacs/-/tree/main/07-the-final-touches?ref_type=heads][Derek Taylor's configuration]]
- *Hooks*: options containing functions to be run before or after a function.
For example, org-mode-hook can contain a list of functions to be called after org-mode is turned on.
- =use-package= only loads packages from ELPA that have already been installed
  =:ensure t= inside =use-package=: checks if the package is installed, and if it isn't, it installs it
- =STARTUP showeverything= open all org tabs when opening file
- =OPTIONS toc:2= depth of the table of contents is 2

* Table of Contents                                                      :toc:
- [[#package-management-system][Package Management System]]
  - [[#setup][Setup]]
  - [[#automatic-package-updates][Automatic Package Updates]]
  - [[#adding-custom-scripts-directory-to-path][Adding custom scripts directory to path]]
- [[#auctex][Auctex]]
  - [[#setting-xetex-to-be-the-default-typesetting-engine][Setting Xetex to be the default typesetting engine]]
- [[#autocompletion][Autocompletion]]
  - [[#ivy-counsel][Ivy (Counsel)]]
  - [[#company][Company]]
  - [[#which-key][Which-key]]
- [[#apperance-gui][Apperance (GUI)]]
  - [[#dashboard-on-startup-deactivated][Dashboard on startup (deactivated)]]
  - [[#general-appearance][General appearance]]
  - [[#default-font][Default Font]]
  - [[#tab-bar-mode][Tab Bar Mode]]
  - [[#the-emacs-modeline][The Emacs Modeline]]
  - [[#file-tree-treemacs][File tree (treemacs)]]
  - [[#diminish][Diminish]]
  - [[#all-the-icons][All The Icons]]
- [[#git][Git]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#org-mode][Org Mode]]
  - [[#org-imports-and-mode-definitions][Org imports and mode definitions]]
  - [[#my-org-setup][My org setup]]
  - [[#replace-list-hyphen-with-dot][Replace list hyphen with dot]]
  - [[#load-languages-to-execute-on-org][Load languages to execute on org]]
  - [[#shortcuts][Shortcuts]]
  - [[#org-level-header-sizes][Org level header sizes]]
- [[#org-roam][Org Roam]]
  - [[#roam-setup][Roam setup]]
  - [[#org-roam-interactive-ui][Org Roam Interactive UI]]
- [[#programming][Programming]]
  - [[#appearance][Appearance]]
  - [[#electric-pair-mode][Electric pair mode]]
  - [[#language-support][Language Support]]
  - [[#python-support][Python support]]
  - [[#outli][Outli]]
- [[#themes][Themes]]
  - [[#custom-themes][Custom themes]]
  - [[#doom-themes][Doom themes]]
  - [[#theme-by-time][Theme By Time]]
- [[#the-shell][The Shell]]
  - [[#vterm][vterm]]
- [[#editing-experience][Editing Experience]]
  - [[#general][General]]
  - [[#bindings-mac-style][Bindings (mac-style)]]
  - [[#scrolling-ultra-scroll][Scrolling (ultra-scroll)]]
  - [[#flycheck][Flycheck]]
- [[#miscellaneous][Miscellaneous]]
  - [[#backup-files][Backup Files]]
- [[#deactivated][Deactivated]]
  - [[#minimalistic-startup][Minimalistic startup]]
  - [[#pdf-tools-deactivated][PDF tools (deactivated)]]
  - [[#org-agenda-deactivated][Org agenda (deactivated)]]

* Package Management System
** Setup
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Automatic Package Updates
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

** Adding custom scripts directory to path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/scripts/")
#+end_src


* Auctex
=auctex= is the standard Emacs Latex package

#+begin_src emacs-lisp
(use-package auctex)
(setq pdf-view-use-scaling t) ;; helps avois blurry PDFs on Mac retina display
#+end_src

** Setting Xetex to be the default typesetting engine
This is required for properly compiling some external latex packages, like =fontspec= 
#+begin_src emacs-lisp
(use-package tex
   :ensure auctex
   :init
   ;; Set default TeX engine to xetex
   (setq TeX-engine 'xetex)
   ;; or for LuaLaTeX, uncomment the following line and comment out the XeTeX line
   ;; (setq TeX-engine 'luatex)
   (setq TeX-PDF-mode t)
   :config
   ;; Use LaTeX-mode for .tex files
   (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
)
#+end_src

* Autocompletion
** Ivy (Counsel)
- =ivy= a generic completion mechanism for Emacs
- =counsel= a collection of Ivy-enhanced versions of common Emacs commands
- =ivy-rich= allows us to add descriptions alongside the commands in =M-x=

#+begin_src emacs-lisp
(use-package ivy
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package all-the-icons-ivy-rich
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev))
#+end_src

** Company
=company= is a text completion framework for Emacs. The name stands for “complete anything”. Completion will start automatically after you type a few letters. Use =M-n= and =M-p= to select, =<return>= to complete or =<tab>= to complete the common part.

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t)
)

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode)
)
#+end_src

*** Disable Company in Shell
#+begin_src emacs-lisp
(add-hook 'shell-mode-hook (lambda () (company-mode -1)) 'append)
#+end_src


** Which-key
Provides suggested Emacs commands when having typed an incomplete command
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → ")
  )
#+end_src


* Apperance (GUI)
** Dashboard on startup (deactivated)
=dashboard= is an extensible [[https://github.com/emacs-dashboard/emacs-dashboard][configurable]] startup screen
#+begin_src emacs-lisp
(setq initial-scratch-message nil)
(setq inhibit-startup-screen t)

;; (use-package dashboard
;;   :init
;;   (setq dashboard-display-icons-p t)     ; display icons on both GUI and terminal
;;   (setq dashboard-icon-type 'all-the-icons)
  
;;   (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
;;   (setq dashboard-center-content nil) ;; set to 't' for centered content
;;   (setq dashboard-items '((recents . 10)
;;                           (bookmarks . 10)
;; 			  ))
;;   :custom
;;   (dashboard-modify-heading-icons '((recents . "file-text")
;;                                     (bookmarks . "book")))
;;   :config
;;   (dashboard-setup-startup-hook)
;;   (setq dashboard-center-content t)
;;   (setq dashboard-item-shortcuts '((recents   . "r")
;;                                    (bookmarks . "b")))
;; )
#+end_src

** General appearance
#+begin_src emacs-lisp
(menu-bar-mode -1) ;; no menubar
(tool-bar-mode -1) ;; no toolbars
(scroll-bar-mode -1) ;; no scroll bars
;; (add-to-list 'default-frame-alist '(undecorated . t)) ;; remove apple window bar

(add-hook 'prog-mode-hook #'display-line-numbers-mode) ;; display line nums in progr mode
(global-visual-line-mode t) ;; lines wrap around

;; full screen on startup
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))

;; specific height and width on startup
;; (add-to-list 'default-frame-alist '(height . 50))
;; (add-to-list 'default-frame-alist '(width . 100))

(setq-default cursor-type '(bar . 2)) ;; cursor width
#+end_src

** Default Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrains Mono")
(set-face-attribute 'default nil
	:height 160
	:weight 'medium)
#+end_src

** Tab Bar Mode
Adds tabs to emacs.

#+begin_src emacs-lisp
(tab-bar-mode 1)

;; keybindings
(global-set-key (kbd "C-S-<tab>") 'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "C-<tab>") 'tab-bar-switch-to-next-tab)
(global-set-key (kbd "M-t") 'tab-bar-new-tab)
(global-set-key (kbd "M-w") 'tab-bar-close-tab)

;; aesthetics
(setq tab-bar-show 1) ;; hide bar if less than 1 tabs open
(setq tab-bar-new-tab-to 'right) ;; put new tab immediate right of current tab
(setq tab-bar-close-button-show nil) ;; remove button that closes tab
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator))
#+end_src

** The Emacs Modeline
*** Moody
- Modern look to mode line [[https://github.com/tarsius/moody][Source]]
#+begin_src emacs-lisp
(use-package moody
  :config
  (moody-replace-mode-line-front-space)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))
#+end_src


** File tree (treemacs)
- =treemacs= is a tree layout file explorer for Emacs ([[https://github.com/Alexander-Miller/treemacs][source]])
- The following code contains treemacs' with all of its options and configurations in their default setting:
  #+begin_src emacs-lisp
  (use-package treemacs)
  #+end_src

** Diminish
=diminish= implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add =:diminish= to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** All The Icons
An icon set that can be used with dashbaord, dired, ibuffer, and other Emacs programs.
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src


* Git
** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][Git Time Machine]] is a program that allows you to move backwards and forwards through a file’s commits.  ‘SPC g t’ will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use ‘CTRL-j’ and ‘CTRL-k’ to move backwards and forwards through the commits.

#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src


** Magit
[[https://magit.vc/manual/][Magit]] is the full-featured git client for Emacs.
#+begin_src emacs-lisp
(use-package magit)
#+end_src


* Org Mode
Source: https://lepisma.xyz/2017/10/28/ricing-org-mode/

** Org imports and mode definitions
#+begin_src emacs-lisp
; Hide modeline mode: (source: https://protesilaos.com/codelog/2020-07-16-emacs-focused-editing/)
(define-minor-mode hidden-mode-line-mode
  "Toggle modeline visibility in the current buffer."
  :init-value nil
  :global nil
  (if hidden-mode-line-mode
      (setq-local mode-line-format nil)
    (kill-local-variable 'mode-line-format)
    (force-mode-line-update)
  )
)

;; DISABLED
;; Writeroom: Focused writing 
;; (use-package writeroom-mode
;;   :ensure t
;;   :config
;;   (setq writeroom-mode-line nil)  ;; display mode-line while in writeroom-mode
;;   (setq writeroom-width 100)     ;; set the width of the writing area
;;   (setq writeroom-global-effects (delq 'fullscreen writeroom-global-effects))
;; )

;; Focused writing (replaced writeroom)
(use-package olivetti
  :ensure t
  :config
  (setq-default olivetti-body-width 100)  ;; Set the body width to 100 characters
)


;; Org bullets: rounded title circles
(use-package org-bullets
  :config
  (setq org-bullets-bullet-list '("\u200b")) ;; make bullets width 0 (i.e. hide them)
)

;; Toc-org: table of contents
(use-package toc-org)
#+end_src


** My org setup
#+begin_src emacs-lisp
(defun my-org-mode-setup ()
  (hidden-mode-line-mode 1)
  (variable-pitch-mode 1)
  (olivetti-mode 1)
  (org-bullets-mode 1)
  (toc-org-enable)
  (setq org-hide-emphasis-markers t)
  (setq org-edit-src-content-indentation 0) ;; don't indent code blocks
  (setq org-startup-with-inline-images t)
  (setq org-pretty-entities t) ;; can put latex inline in org
)

;; fullscreen alias to exit org mode fullscreen
(defalias 'fullscreen 'toggle-frame-fullscreen)

(add-hook 'org-mode-hook 'my-org-mode-setup)
#+end_src

** Replace list hyphen with dot
[[https://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][Source]]
#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

** Load languages to execute on org
Can execute code blocks using =C-c C-c=
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
#+end_src

** Shortcuts
#+begin_src emacs-lisp
(defun config ()
  (interactive)
  ;; (delete-other-windows)
  (find-file "~/.emacs.d/config.org")
)
#+end_src

** Org level header sizes
#+begin_src emacs-lisp
(add-hook 'after-init-hook ;; after init, because have to wait for theme to fully load
          (lambda ()
            (let* ((variable-tuple
                    (cond ((x-list-fonts "ETBembo") '(:font "ETBembo"))
                          ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                          ((x-list-fonts "Lucida Grande") '(:font "Lucida Grande"))
                          ((x-list-fonts "Verdana") '(:font "Verdana"))
                          ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
                          (nil (warn "Cannot find a Sans Serif Font. Install Source Sans Pro."))))
                   (base-font-color (face-foreground 'default nil 'default))
                   (headline `(:inherit default :weight bold :foreground ,base-font-color)))
              (custom-theme-set-faces
               'user
	       ;; org headers
               `(org-level-8 ((t (,@headline ,@variable-tuple))))
               `(org-level-7 ((t (,@headline ,@variable-tuple))))
               `(org-level-6 ((t (,@headline ,@variable-tuple))))
               `(org-level-5 ((t (,@headline ,@variable-tuple))))
               `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
               `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.1))))
               `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.1))))
               `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.25))))
               `(org-document-title ((t (,@headline ,@variable-tuple :height 1.75 :underline nil))))

	       ;; Defining variable and mono-spaced
	       '(variable-pitch ((t (:family "ETBembo" :height 220 :weight thin))))
	       '(fixed-pitch ((t ( :family "JetBrains Mono" :height 158 :weight medium))))

	       ;; Face settings
	       '(org-block ((t (:inherit fixed-pitch)))) ; source code blocks set to fixed-pitch (monospaced)
	       '(org-code ((t (:inherit (shadow fixed-pitch)))))
	       '(org-document-info ((t (:foreground "dark orange"))))
	       '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
	       '(org-link ((t (:foreground "royal blue" :underline t))))
	       '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
	       '(org-property-value ((t (:inherit fixed-pitch))) t)
	       '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
	       (set-face-attribute 'font-lock-comment-face nil :slant 'italic) ;; set commented regions to itallic
	       '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
	       '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
	       '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))))))
#+end_src


* Org Roam
** Roam setup
#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/gonz/Obsidian")
  (org-roam-completion-everywhere t)
  :bind (("C-c r t" . org-roam-buffer-toggle)
         ("C-c r f" . org-roam-node-find)
         ("C-c r i" . org-roam-node-insert)
	     ("C-c r g" . org-roam-ui-open)
	     ("C-c r G" . org-roam-graph)
	    )
  :config
  (org-roam-db-autosync-mode)
  (org-roam-setup))
#+end_src

** Org Roam Interactive UI
#+begin_src emacs-lisp
;; Required dependencies for ui graph package
(use-package websocket
  :after org-roam)

(use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src


* Programming
** Appearance
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'display-line-numbers-mode) ;; enable line numbers only in programming modes
(add-hook 'prog-mode-hook #'olivetti-mode)
#+end_src

** Electric pair mode
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src


** Language Support
+ Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

+ [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Associating-modes-with-files.html][How do I make Emacs use a certain major mode for certain files?]]

#+begin_src emacs-lisp
(use-package haskell-mode)
(use-package php-mode)
#+end_src

*** OCaml
[[https://batsov.com/articles/2022/08/23/setting-up-emacs-for-ocaml-development/][Setting up emacs for OCaml]]
#+begin_src emacs-lisp
;; Major mode for OCaml programming
(use-package tuareg
  :ensure t
  :mode (("\\.ocamlinit\\'" . tuareg-mode)))

;; Major mode for editing Dune project files
(use-package dune
  :ensure t)

;; Merlin provides advanced OCaml IDE features
(use-package merlin
  :ensure t
  :config
  (add-hook 'tuareg-mode-hook #'merlin-mode)
  ;; we're using flycheck instead
  (setq merlin-error-after-save nil))


; Make company aware of merlin
(with-eval-after-load 'company
  (add-to-list 'company-backends 'merlin-company-backend))
; Enable company on merlin managed buffers
(add-hook 'merlin-mode-hook 'company-mode)

(use-package merlin-eldoc
  :ensure t
  :hook ((tuareg-mode) . merlin-eldoc-setup))

;; appends opam's bin directory to the PATH environment variable in Emacs, allowing it to find ocamlmerlin
(let ((opam-bin (expand-file-name "~/.opam/default/bin")))
  (add-to-list 'exec-path opam-bin)
  (setenv "PATH" (concat opam-bin ":" (getenv "PATH"))))


;; This uses Merlin internally
(use-package flycheck-ocaml
  :ensure t
  :config
  (flycheck-ocaml-setup))
#+end_src

*** c0
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.c0\\'" . c-mode)) ;; turn on C-mode with any file ending in .c0
#+end_src

*** why3
#+begin_src emacs-lisp
(require 'why3)
#+end_src

*** Serpent
serpent-mode.el has been loaded when starting emacs, when loading the scripts folder
#+begin_src emacs-lisp
;; (require 'serpent-mode) ;; request to load mode as a response to the (provide 'serpent-mode) line in the serpent-mode.el file
;; (add-to-list 'auto-mode-alist '("\\.srp\\'" . serpent-mode))

;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
#+end_src

** Python support
#+begin_src emacs-lisp
;; remove error message when launching python
(setq python-shell-completion-native-enable nil)
#+end_src

** Outli
- =outli= is a simple and stylish [[https://github.com/jdtsmith/outli][comment-based outlines]] with speed keys for Emacs
- can organize code in comments like org mode
#+begin_src emacs-lisp
(use-package outli
  :load-path "./scripts/outli/"
  :bind (:map outli-mode-map ; convenience key to get back to containing heading
	      ("C-c C-p" . (lambda () (interactive) (outline-back-to-heading))))
  :hook ((prog-mode text-mode) . outli-mode) ; programming modes
)  
#+end_src


* Themes
- The first line designates the directory where all the themes are stored. (a theme can be written as a block of elisp code).

- These blocks of code can be automatically generated using the [[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]]

- When writing =(load-theme 'name t)=, the =name= is specified in the theme's elisp file with the command =(provide-theme 'name)=

** Custom themes
#+begin_src emacs-lisp
;; The following adds all our own-made themes in the themes folder to Emacs' custom themes list
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+end_src

** Doom themes
#+begin_src emacs-lisp
;; The following adds a bunch of doom-themes to Emacs' custom themes list, which we can load using M-x load-theme

;; Doom themes: [https://github.com/doomemacs/themes]
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
)
#+end_src


** Theme By Time
- =theme-changer= changes your theme depending on your location's sunrise and sunset time
- Emacs source: https://www.gnu.org/software/emacs/manual/html_node/emacs/Sunrise_002fSunset.html
- Package: https://github.com/hadronzoo/theme-changer

#+begin_src emacs-lisp
;; Set location
;; (setq calendar-latitude 40.4)
;; (setq calendar-longitude -79.9)
;; (setq calendar-location-name "Pittsburgh, PA")

;; (setq calendar-latitude 40.4)
;; (setq calendar-longitude -3.7)
;; (setq calendar-location-name "Madrid, ES")


;; (use-package theme-changer
;;   :config
;;   ;; (change-theme 'material-light 'dracula)
;;   ;; (change-theme 'material-light 'material-light)
;;   (change-theme 'spacemacs-light 'spacemacs-dark)
;; )
(load-theme 'spacemacs-light t)
#+end_src

* The Shell
** vterm
An [[https://github.com/akermu/emacs-libvterm/][improved terminal emulator package]] which uses a compiled native module to interact with the underlying terminal applications.
#+begin_src emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))

#+end_src

* Editing Experience
** General
#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(save-place-mode 1)          ;; Remember and restore the last cursor location of opened files
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
;; Required for gnupg (gpg) encryption to work
#+end_src


** Bindings (mac-style)
#+begin_src emacs-lisp
(global-unset-key (kbd "C-z")) ;; remove C-z as the window minimization
(global-unset-key (kbd "C-_")) ;; remove C-S-_ to undo
(global-unset-key (kbd "C-y")) ;; remove  C-y to yank
(global-unset-key (kbd "C-x h")) ;; remove C-x h to select all 


(global-set-key (kbd "M-c") 'kill-ring-save) ;; copy
(global-set-key (kbd "M-v") 'yank) ;; paste
(global-set-key (kbd "M-z") 'undo) ;; undo
(global-set-key (kbd "M-a") 'mark-whole-buffer) ;; select all
#+end_src

** Scrolling (ultra-scroll)
- Improves =emacs-mac= scrolling experience.
- Elisp code located in scripts folder, pulled from [[https://github.com/jdtsmith/ultra-scroll-mac][jdtsmith]]

#+begin_src emacs-lisp
(use-package ultra-scroll-mac
  :if (eq window-system 'mac)
  :load-path "./scripts/ultra-scroll-mac/" ; if you git clone'd instead of package-vc-install
  :init
  (setq scroll-conservatively 101 ; important!
        scroll-margin 0) 
  :config
  (ultra-scroll-mac-mode 1))
#+end_src

** Flycheck
For more info on Flycheck, click [[https://www.flycheck.org/en/latest/languages.html][here]].

#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :diminish ;;explanation of what diminish does, search for "DIMINISH"
  :init (global-flycheck-mode))
#+end_src

* Miscellaneous
** Backup Files
By default, Emacs creates automatic backups of files in their original directories, such “file.el” and the backup “file.el~”.  This leads to a lot of clutter, so let’s tell Emacs to put all backups that it creates in the TRASH directory.

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

(setq delete-old-versions t) ;; Don't ask to delete excess backup versions.
#+end_src


* Deactivated
** Minimalistic startup
#+begin_src emacs-lisp
;; (defun ar/show-welcome-buffer ()
;;   "Show *Welcome* buffer."
;;   (with-current-buffer (get-buffer-create "*Welcome*")
;;     (setq truncate-lines t)
;;     (let* ((buffer-read-only)
;;            (image-path "~/.emacs.d/images/startup-emacs.png")
;;            (image (create-image image-path))
;;            (size (image-size image))
;;            (height (cdr size))
;;            (width (car size))
;;            (top-margin (floor (/ (- (window-height) height) 2)))
;;            (left-margin (floor (/ (- (window-width) width) 2)))
;;            (prompt-title "Welcome to Emacs!"))
;;       (erase-buffer)
;;       (setq mode-line-format nil)
;;       (goto-char (point-min))
;;       (insert (make-string top-margin ?\n ))
;;       (insert (make-string left-margin ?\ ))
;;       (insert-image image)
;;       (insert "\n\n\n")
;;       (insert (make-string (floor (/ (- (window-width) (string-width prompt-title)) 2)) ?\ ))
;;       (insert prompt-title))
;;     (read-only-mode +1)
;;     (switch-to-buffer (current-buffer))
;;     (local-set-key (kbd "q") 'kill-this-buffer)))



;; (when (< (length command-line-args) 2)
;;   (add-hook 'emacs-startup-hook (lambda ()
;;                                   (when (display-graphic-p)
;;                                     (ar/show-welcome-buffer))))
;; )
#+end_src

** PDF tools (deactivated)
PDF tools is the package used for viewing PDFs (an alternative to Skim, Preview)

#+begin_src emacs-lisp
;; CODE NOT WORKING
;; (pdf-tools-install) ; Very nice PDF viewer (needs separate installation)
;; (load-library "pdf-tools")

;; (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
;; (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
;; (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

;; (setq pdf-sync-backward-display-action t)
;; (setq pdf-sync-forward-display-action t)
#+end_src


** Org agenda (deactivated)
*** The files agenda tracks:
#+begin_src emacs-lisp
;; (setq org-agenda-files 
;;       '("~/gonz/OrgFiles/")
;; )
#+end_src

*** Visual tweaks
#+begin_src emacs-lisp
;; (setq org-ellipsis " ▾")
;; (setq org-agenda-start-with-log-mode t)
;; ;; (setq org-log-done 'time) ;; This is to put in agenda time when a task was marked as done
;; (setq org-log-into-drawer t)
#+end_src

*** Custom Keywords
- The (t) and (n) are keys to press to set these states
- The "|" separates active and unactive states
#+begin_src emacs-lisp
;; (setq org-todo-keywords
;;       '(
;; 	    (sequence "TODO" "|" "DONE")
;; 	    (sequence "ATTEND" "|" "DONE")
;; 	    (sequence "GYM" "|" "DONE")
;; 	    (sequence "FUN" "|" "DONE")
;;        )
;; )


;; (setq org-todo-keyword-faces
;;       (quote (("TODO" :foreground "deep sky blue" :weight bold)
;; 	          ("DONE" :foreground "forest green" :weight bold)
;; 		  ("ATTEND" :foreground "light salmon" :weight bold)
;;               ("GYM" :foreground "cyan" :weight bold)
;; 	          ("FUN" :foreground "medium spring green" :weight bold))
;; 	  )
;; )
#+end_src


*** Agenda View Shortcuts
**** M-x tasks
#+begin_src emacs-lisp
;; (defun tasks ()
;;   (interactive)
;;   ;;(delete-other-windows)
;;   (find-file "~/gonz/OrgFiles/Tasks.org")
;; )
#+end_src


**** M-x reminders
#+begin_src emacs-lisp
;; (defun reminders ()
;;   (interactive)
;;   ;;(delete-other-windows)
;;   (find-file "~/gonz/OrgFiles/Reminders.org")
;; )
#+end_src


**** M-x today
#+begin_src emacs-lisp
;; (defun today ()
;;    (interactive)
;;    (delete-other-windows) 
;;    (let ((org-agenda-span 'day)) ; for this command only
;;         (org-agenda nil "a")
;; 	 )   
;;    (delete-other-windows)  
;; )
#+end_src

**** M-x week
#+begin_src emacs-lisp
;; (setq org-agenda-span 10 ;; number of days to include in week view
;;       org-agenda-start-on-weekday nil ;; sets week view's first day to be today
;; )

;; (defun week ()
;;    (interactive)
;;    (delete-other-windows)   
;;    (let ((org-agenda-span 'week)) ; for this command only
;;         (org-agenda nil "a")
;; 	 )
;;       (delete-other-windows)  
;; )
#+end_src


*** Habit tracking
#+begin_src emacs-lisp
;; (require 'org-habit)
;; (add-to-list 'org-modules 'org-habit)
;; (setq org-habit-graph-colum 80)  ;; what column in your agenda it pops up on
#+end_src
