#+TITLE: Gonz's GNU Emacs Config
#+AUTHOR: Gonzalo de Hermenegildo
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Config Overview
- early-init.el: a file that gets loaded before this one
- Largely based on [[https://gitlab.com/dwt1/configuring-emacs/-/tree/main/07-the-final-touches?ref_type=heads][Derek Taylor's configuration]]

* Cheat Sheet
- *Hooks*: options containing functions to be run before or after a function.
For example, org-mode-hook can contain a list of functions to be called after org-mode is turned on.
- =use-package= only loads packages from ELPA that have already been installed
  =:ensure t= inside =use-package=: checks if the package is installed, and if it isn't, it installs it
- =STARTUP showeverything= open all org tabs when opening file
- =OPTIONS toc:2= depth of the table of contents is 2

* TABLE OF CONTENTS                                                     :toc:
- [[#config-overview][Config Overview]]
- [[#cheat-sheet][Cheat Sheet]]
- [[#package-management-system][Package Management System]]
  - [[#setup][Setup]]
  - [[#automatic-package-updates][Automatic Package Updates]]
  - [[#adding-custom-scripts-directory-to-path][Adding custom scripts directory to path]]
- [[#nano][NANO]]
  - [[#overriding-nano-font-lock-disactivated][Overriding nano font-lock (disactivated)]]
- [[#auctex][AUCTEX]]
  - [[#setting-xetex-to-be-the-default-typesetting-engine][Setting Xetex to be the default typesetting engine]]
- [[#backup-files][BACKUP FILES]]
- [[#company][COMPANY]]
  - [[#disable-company-in-shell][Disable Company in Shell]]
- [[#dashboard-disactivated][DASHBOARD (disactivated)]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars, and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#window-size-on-startup][Window size on startup]]
  - [[#fonts-type-size][Fonts: type, size]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#diminish][DIMINISH]]
- [[#flycheck][FLYCHECK]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][MAGIT]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#org-mode][ORG MODE]]
  - [[#ensuring-emacs-fully-loads-org][Ensuring emacs fully loads org]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#making-org-look-modern][Making org look modern]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-indent][Disable Indent]]
  - [[#org-level-header-sizes][Org level header sizes]]
  - [[#replace-list-hyphen-with-dot][Replace list hyphen with dot]]
  - [[#load-languages-to-execute-on-org][Load languages to execute on org]]
- [[#org-agenda][Org agenda]]
  - [[#the-files-agenda-tracks][The files agenda tracks:]]
  - [[#visual-tweaks][Visual tweaks]]
  - [[#custom-keywords][Custom Keywords]]
  - [[#agenda-view-shortcuts][Agenda View Shortcuts]]
  - [[#habit-tracking][Habit tracking]]
- [[#org-roam][Org Roam]]
  - [[#roam-setup][Roam setup]]
  - [[#org-roam-interactive-ui][Org Roam Interactive UI]]
- [[#outli][Outli]]
- [[#outshine-disactivated][Outshine (disactivated)]]
- [[#pdf-tools][PDF TOOLS]]
- [[#programming][PROGRAMMING]]
  - [[#automation][Automation]]
  - [[#language-support][Language Support]]
  - [[#python-support][Python support]]
- [[#themes][THEMES]]
  - [[#custom-themes][Custom themes]]
  - [[#doom-themes][Doom Themes]]
  - [[#theme-changer-disactivated][Theme Changer (disactivated)]]
  - [[#load-theme-disactivated][Load theme (disactivated)]]
- [[#treemacs][TREEMACS]]
- [[#ultra-scroll][ULTRA-SCROLL]]
- [[#vterm][VTERM]]
- [[#which-key][WHICH-KEY]]
- [[#miscellaneous][MISCELLANEOUS]]

* Package Management System
** Setup
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Automatic Package Updates
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

** Adding custom scripts directory to path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/scripts/")
#+end_src

* NANO
- =NANO= is a set of [[https://github.com/rougier][config files]] that provide Emacs a nice minimalistic, consistent, paper-like look and feel.
- To *edit nano theme colors*, change the values in /nano-theme-light.el/ and /nano-theme-dark.el/
- =M-x nano-toggle-theme= toggles light to dark nano themes  
- Author: [[https://github.com/rougier][Rougier]]

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/scripts/nano-emacs") ;; Path to nano emacs modules (mandatory)
(require 'nano-layout) ;; Default layout (optional)

;; Theming Command line options (this will cancel warning messages)
(add-to-list 'command-switch-alist '("-dark"   . (lambda (args))))
(add-to-list 'command-switch-alist '("-light"  . (lambda (args))))
(add-to-list 'command-switch-alist '("-default"  . (lambda (args))))
(add-to-list 'command-switch-alist '("-no-splash" . (lambda (args))))
(add-to-list 'command-switch-alist '("-no-help" . (lambda (args))))
(add-to-list 'command-switch-alist '("-compact" . (lambda (args))))

;; Theme
(require 'nano-faces)
(require 'nano-theme)
(require 'nano-theme-dark)
(require 'nano-theme-light)

(cond
 ((member "-default" command-line-args) t)
 ((member "-dark" command-line-args) (nano-theme-set-dark))
 (t (nano-theme-set-light)))
(call-interactively 'nano-refresh-theme)


(require 'nano-defaults) ;; Nano default settings (optional)
(require 'nano-modeline) ;; Nano header & mode lines (optional)
(require 'nano-session) ;; Nano session saving (optional)

(when (member "-compact" command-line-args) ;; Compact layout (need to be loaded after nano-modeline)
  (require 'nano-compact))


;; Welcome message (optional)
(let ((inhibit-message t))
  (message "Welcome to GNU Emacs / N Λ N O edition")
  (message (format "Initialization time: %s" (emacs-init-time))))

;; Splash (optional)
(unless (member "-no-splash" command-line-args)
  (require 'nano-splash))

;; Help (optional)
(unless (member "-no-help" command-line-args)
  (require 'nano-help))
#+end_src


** Overriding nano font-lock (disactivated)
- Font lock: programming mode syntax highlighting
- Customize the colors of keywords
#+begin_src emacs-lisp
;; (custom-set-faces
;;  '(font-lock-keyword-face ((t (:foreground "#0222E8"))))
;;  ;;'(font-lock-function-name-face ((t (:foreground "#EB600D"))))
;;  '(font-lock-function-name-face ((t (:foreground "#EA3001")))) 
;;  '(font-lock-type-face ((t (:foreground "#61EAB3"))))
;; )
#+end_src



* AUCTEX
=auctex= is the standard Emacs Latex package

#+begin_src emacs-lisp
(use-package auctex)
#+end_src

** Setting Xetex to be the default typesetting engine

This is required for properly compiling some external latex packages, like =fontspec= 
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :init
  ;; Set default TeX engine to xetex
  (setq TeX-engine 'xetex)
  ;; or for LuaLaTeX, uncomment the following line and comment out the XeTeX line
  ;; (setq TeX-engine 'luatex)
  (setq TeX-PDF-mode t)
  :config
  ;; Use LaTeX-mode for .tex files
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
)
#+end_src


* BACKUP FILES
By default, Emacs creates automatic backups of files in their original directories, such “file.el” and the backup “file.el~”.  This leads to a lot of clutter, so let’s tell Emacs to put all backups that it creates in the TRASH directory.

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src


* COMPANY
=company= is a text completion framework for Emacs. The name stands for “complete anything”. Completion will start automatically after you type a few letters. Use =M-n= and =M-p= to select, =<return>= to complete or =<tab>= to complete the common part.

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t)
)

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode)
)
#+end_src

** Disable Company in Shell
#+begin_src emacs-lisp
(add-hook 'shell-mode-hook (lambda () (company-mode -1)) 'append)
#+end_src

* DASHBOARD (disactivated)
=dashboard= is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.
#+begin_src emacs-lisp
;; (use-package dashboard
;;   :init
;;   (setq dashboard-set-heading-icons t)
;;   (setq dashboard-set-file-icons t)
;;   (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
;; ;;   ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
;;   (setq dashboard-startup-banner "~/.emacs.d/images/multicolor-gnu.jpg")  ;; use custom image as banner
;;   (setq dashboard-center-content nil) ;; set to 't' for centered content
;;   (setq dashboard-items '((recents . 5)
;;                           (agenda . 5 )
;;                           (bookmarks . 3)
;;                           (registers . 3)))
;;   :custom
;;   (dashboard-modify-heading-icons '((recents . "file-text")
;;                                     (bookmarks . "book")))
;;   :config
;;   (dashboard-setup-startup-hook))
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
More minimal user interface

** Disable Menubar, Toolbars, and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

** Window size on startup
#+begin_src emacs-lisp
;; full screen
;;(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; specific height and width
(add-to-list 'default-frame-alist '(height . 50))
(add-to-list 'default-frame-alist '(width . 100))
#+end_src

** Fonts: type, size
#+begin_src emacs-lisp
(set-face-attribute 'default nil
	:height 150
	:weight 'medium)

;; Sets commented regions to itallic
(set-face-attribute 'font-lock-comment-face nil
   :slant 'italic)
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashbaord, dired, ibuffer, and other Emacs programs.

#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src


* DIMINISH
=diminish= implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add =:diminish= to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* FLYCHECK
For more info on Flycheck, click [[https://www.flycheck.org/en/latest/languages.html][here]].

#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :diminish ;;explanation of what diminish does, search for "DIMINISH"
  :init (global-flycheck-mode))
#+end_src



* GIT PROGRAMS
** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][Git Time Machine]] is a program that allows you to move backwards and forwards through a file’s commits.  ‘SPC g t’ will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use ‘CTRL-j’ and ‘CTRL-k’ to move backwards and forwards through the commits.

#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src



** MAGIT
[[https://magit.vc/manual/][Magit]] is the full-featured git client for Emacs.
#+begin_src emacs-lisp
(use-package magit)
#+end_src


* IVY (COUNSEL)
- =ivy= a generic completion mechanism for Emacs
- =counsel= a collection of Ivy-enhanced versions of common Emacs commands
- =ivy-rich= allows us to add descriptions alongside the commands in =M-x=

#+begin_src emacs-lisp
(use-package ivy
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))


(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package all-the-icons-ivy-rich
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev))
#+end_src


* ORG MODE

** Ensuring emacs fully loads org
#+begin_src emacs-lisp
(require 'org)
#+end_src

** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Making org look modern
[[https://github.com/minad/org-modern][Source]]
#+begin_src emacs-lisp
(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t;; hide markers such as ** for bold, or __ for underline
 )
#+end_src

** Enabling Org Bullets
=org-bullets= gives aesthetic bullets rather than asterisks.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Indent
Org mode source blocks have some really weird and annoying default indentation behavior. I think this has to do with electric-indent-mode, which is turned on by default in Emacs. So this turns it off.

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0) ;; sets org code indentation to 0 spaces by default
#+end_src

** Org level header sizes
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
 '(org-level-3 ((t (:inherit outline-5 :height 1.0))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
 '(org-level-5 ((t (:inherit outline-3 :height 1.0))))
 '(org-level-6 ((t (:inherit outline-6 :height 1.0))))
 '(org-level-7 ((t (:inherit outline-7 :height 1.0)))))
#+end_src

** Replace list hyphen with dot
[[https://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][Source]]
#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ +\\([-*]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src


** Load languages to execute on org
Can execute code blocks using =C-c C-c=
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
#+end_src


* Org agenda
** The files agenda tracks:
#+begin_src emacs-lisp
(setq org-agenda-files 
      '("~/gonz/OrgFiles/")
)
#+end_src

** Visual tweaks
#+begin_src emacs-lisp
(setq org-ellipsis " ▾")
(setq org-agenda-start-with-log-mode t)
;; (setq org-log-done 'time) ;; This is to put in agenda time when a task was marked as done
(setq org-log-into-drawer t)
#+end_src

** Custom Keywords
- The (t) and (n) are keys to press to set these states
- The "|" separates active and unactive states
#+begin_src emacs-lisp
(setq org-todo-keywords
      '(
	    (sequence "TODO" "|" "DONE")
	    (sequence "ATTEND" "|" "DONE")
	    (sequence "GYM" "|" "DONE")
	    (sequence "FUN" "|" "DONE")
       )
)


(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "deep sky blue" :weight bold)
	          ("DONE" :foreground "forest green" :weight bold)
		  ("ATTEND" :foreground "light salmon" :weight bold)
              ("GYM" :foreground "cyan" :weight bold)
	          ("FUN" :foreground "medium spring green" :weight bold))
	  )
)
#+end_src


** Agenda View Shortcuts
*** M-x tasks
#+begin_src emacs-lisp
(defun tasks ()
  (interactive)
  ;;(delete-other-windows)
  (find-file "~/gonz/OrgFiles/Tasks.org")
)
#+end_src


*** M-x reminders
#+begin_src emacs-lisp
(defun reminders ()
  (interactive)
  ;;(delete-other-windows)
  (find-file "~/gonz/OrgFiles/Reminders.org")
)
#+end_src


*** M-x today
#+begin_src emacs-lisp
(defun today ()
   (interactive)
   (delete-other-windows) 
   (let ((org-agenda-span 'day)) ; for this command only
        (org-agenda nil "a")
	 )   
   (delete-other-windows)  
)
#+end_src

*** M-x week
#+begin_src emacs-lisp
(setq org-agenda-span 10 ;; number of days to include in week view
      org-agenda-start-on-weekday nil ;; sets week view's first day to be today
)

(defun week ()
   (interactive)
   (delete-other-windows)   
   (let ((org-agenda-span 'week)) ; for this command only
        (org-agenda nil "a")
	 )
      (delete-other-windows)  
)
#+end_src

*** M-x config
#+begin_src emacs-lisp
(defun config ()
  (interactive)
  ;; (delete-other-windows)
  (find-file "~/.emacs.d/config.org")
)
#+end_src


** Habit tracking
#+begin_src emacs_lisp
(require 'org-habit)
(add-to-list 'org-modules 'org-habit)
(setq org-habit-graph-colum 80)  ;; what column in your agenda it pops up on
#+end_src


* Org Roam
** Roam setup
#+begin_src emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/gonz/Obsidian")
  (org-roam-completion-everywhere t)
  :bind (("C-c r t" . org-roam-buffer-toggle)
         ("C-c r f" . org-roam-node-find)
         ("C-c r i" . org-roam-node-insert)
	     ("C-c r g" . org-roam-ui-open)
	     ("C-c r G" . org-roam-graph)
	    )
  :config
  (org-roam-db-autosync-mode)
  (org-roam-setup))
#+end_src

** Org Roam Interactive UI
#+begin_src emacs-lisp
;; Required dependencies for ui graph package
(use-package websocket
  :after org-roam)

(use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src


* Outli
=outli= is a simple and stylish [[https://github.com/jdtsmith/outli][comment-based outlines]] with speed keys for Emacs

#+begin_src emacs-lisp
(use-package outli
  :load-path "./scripts/outli/"
  :bind (:map outli-mode-map ; convenience key to get back to containing heading
	      ("C-c C-p" . (lambda () (interactive) (outline-back-to-heading))))
  :hook ((prog-mode text-mode) . outli-mode) ; programming modes
)  
#+end_src

* Outshine (disactivated)
=outshine= adds an org-mode functionality to any non-org mode you'd like. ([[https://github.com/alphapapa/outshine][Source]])

#+begin_src emacs-lisp
;; (use-package outshine
;;   :config
;;   (add-hook 'python-mode-hook 'outshine-mode)
;;   (add-hook 'c-mode-hook 'outshine-mode)
;;   (add-hook 'cpp-mode-hook 'outshine-mode)
;; )
#+end_src


* PDF TOOLS
PDF tools is the package used for viewing PDFs (an alternative to Skim, Preview)

#+begin_src emacs-lisp
;; Helps avois blurry PDFs on Mac retina display
(setq pdf-view-use-scaling t)


;; CODE NOT WORKING

;; (pdf-tools-install) ; Very nice PDF viewer (needs separate installation)
;; (load-library "pdf-tools")

;; (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
;; (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
;; (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

;; (setq pdf-sync-backward-display-action t)
;; (setq pdf-sync-forward-display-action t)

;; ;; Auto revert in doc view buffers, yeah! Plus new bindings
;; (if (< emacs-major-version 23)
;;     ()
;;   (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
;;   (add-hook 'pdf-view-mode-hook 'my-pdf-view-set-bindings))

#+end_src




* PROGRAMMING
** Automation
#+begin_src emacs-lisp
(electric-pair-mode 1) ;; auto fill parentheses
#+end_src


** Language Support
+ Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

+ [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Associating-modes-with-files.html][How do I make Emacs use a certain major mode for certain files?]]

#+begin_src emacs-lisp
(use-package haskell-mode)
(use-package php-mode)
#+end_src

*** c0
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.c0\\'" . c-mode)) ;; turn on C-mode with any file ending in .c0
#+end_src

*** Serpent
serpent-mode.el has been loaded when starting emacs, when loading the scripts folder

#+begin_src emacs-lisp
(require 'serpent-mode) ;; request to load mode as a response to the (provide 'serpent-mode) line in the serpent-mode.el file
(add-to-list 'auto-mode-alist '("\\.srp\\'" . serpent-mode))

(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
#+end_src



** Python support
#+begin_src emacs-lisp
;; remove error message when launching python
(setq python-shell-completion-native-enable nil)
#+end_src


* THEMES
- The first line designates the directory where all the themes are stored. (a theme can be written as a block of elisp code).

- These blocks of code can be automatically generated using the [[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]]

- When writing =(load-theme 'name t)=, the =name= is specified in the theme's elisp file with the command =(provide-theme 'name)=

** Custom themes
#+begin_src emacs-lisp
;; The following adds all our own-made themes in the themes folder to Emacs' custom themes list
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+end_src

** Doom Themes
#+begin_src emacs-lisp
;; The following adds a bunch of doom-themes to Emacs' custom themes list, which we can load using M-x load-theme

;; Dom themes: [https://github.com/doomemacs/themes]
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
)
#+end_src


** Theme Changer (disactivated)
- =theme-changer= changes your theme depending on your location's sunrise and sunset time
- Emacs source: https://www.gnu.org/software/emacs/manual/html_node/emacs/Sunrise_002fSunset.html
- Package: https://github.com/hadronzoo/theme-changer

#+begin_src emacs-lisp
;; Set location
;; ;; (setq calendar-latitude 40.4)
;; ;; (setq calendar-longitude -79.9)
;; ;; (setq calendar-location-name "Pittsburgh, PA")

;; (setq calendar-latitude 40.4)
;; (setq calendar-longitude -3.7)
;; (setq calendar-location-name "Madrid, ES")


;; (use-package theme-changer
;;   :config
;;   (change-theme 'leuven 'doom-Iosvkem)
;;   ;; (change-theme 'doom-Iosvkem 'doom-Iosvkem)
  
;; )
#+end_src

** Load theme (disactivated)
#+begin_src emacs-lisp
#+end_src

* TREEMACS
- =treemacs= is a tree layout file explorer for Emacs ([[https://github.com/Alexander-Miller/treemacs][source]])
- The following code contains treemacs' with all of its options and configurations in their default setting:
  #+begin_src emacs-lisp
  (use-package treemacs)
  #+end_src

* ULTRA-SCROLL
- Improves =emacs-mac= scrolling experience.
- Elisp code located in scripts folder, pulled from [[https://github.com/jdtsmith/ultra-scroll-mac][jdtsmith]]

#+begin_src emacs-lisp
(use-package ultra-scroll-mac
  :if (eq window-system 'mac)
  :load-path "./scripts/ultra-scroll-mac/" ; if you git clone'd instead of package-vc-install
  :init
  (setq scroll-conservatively 101 ; important!
        scroll-margin 0) 
  :config
  (ultra-scroll-mac-mode 1))
#+end_src

* VTERM
An [[https://github.com/akermu/emacs-libvterm/][improved terminal emulator package]] which uses a compiled native module to interact with the underlying terminal applications.
#+begin_src emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))

#+end_src

* WHICH-KEY
Provides suggested Emacs commands when having typed an incomplete command
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → ")
  )
#+end_src


* MISCELLANEOUS
#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(save-place-mode 1)          ;; Remember and restore the last cursor location of opened files
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
;; Required for gnupg (gpg) encryption works
(defvar epa-pinentry-mode)
(setq epa-pinentry-mode 'loopback)
#+end_src
